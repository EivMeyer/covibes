# Docker Compose for ColabVibe Development
# 
# This configuration provides:
# - PostgreSQL database for user data, teams, and chat history
# - Redis for session management and real-time communication
# - Backend Express server with Socket.io
# - Frontend React application with Vite dev server
# - Development-friendly settings with data persistence and hot reload
# 
# Usage:
#   docker-compose up -d    # Start services in background
#   docker-compose down     # Stop services and remove containers
#   docker-compose logs -f  # View service logs (follow mode)

services:
  # Backend Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    container_name: colabvibe_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/colabvibe_dev
      REDIS_URL: redis://:redispassword@redis:6379
      JWT_SECRET: your-secret-key-here-change-in-production
      ENCRYPTION_KEY: abcdef1234567890abcdef1234567890
      USE_MOCK_AGENTS: "true"
      PORT: "3001"
      FRONTEND_URL: http://frontend:3000
      # Health check endpoint
      HEALTH_CHECK_ENABLED: "true"
    ports:
      - "3001:3001"
    volumes:
      - ./server:/app:cached
      - server_node_modules:/app/node_modules
    networks:
      - colabvibe_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Client
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    container_name: colabvibe_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001
      VITE_BACKEND_URL: http://backend:3001
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app:cached
      - client_node_modules:/app/node_modules
    networks:
      - colabvibe_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: colabvibe_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: colabvibe_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      # Enable logging for development
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5433:5432"
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Custom initialization scripts
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - colabvibe_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d colabvibe_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Sessions and Caching
  redis:
    image: redis:7-alpine
    container_name: colabvibe_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword
    ports:
      - "6379:6379"
    volumes:
      # Persist Redis data
      - redis_data:/data
      # Custom Redis configuration
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - colabvibe_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Optional: pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: colabvibe_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@colabvibe.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - colabvibe_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      # Only start with: docker-compose --profile admin up
      - admin

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: colabvibe_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:0:redispassword"
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    networks:
      - colabvibe_network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      # Only start with: docker-compose --profile admin up
      - admin

  # Optional: Test runner service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: colabvibe_tests
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/colabvibe_dev
      REDIS_URL: redis://:redispassword@redis:6379
      NODE_ENV: test
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - colabvibe_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      # Only start with: docker-compose --profile test up
      - test
    command: npm test

volumes:
  # Named volumes for data persistence - using Docker managed volumes for better portability
  postgres_data:
    driver: local
  
  redis_data:
    driver: local
  
  pgadmin_data:
    driver: local
  
  # Node modules volumes to improve performance and avoid conflicts
  server_node_modules:
    driver: local
  
  client_node_modules:
    driver: local

networks:
  colabvibe_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16